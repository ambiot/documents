# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Ameba IoT
# This file is distributed under the same license as the AmebaDocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AmebaDocs EPUB3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-12 04:08+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:3 UART
msgid "BLE – BLE UART Service"
msgstr "BLE - UART 服务"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:8 UART
msgid ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **Materials** "
":raw-html:`</p>`"
msgstr ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **材料准备** :raw-"
"html:`</p>`"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:12 UART
msgid "AmebaD [AMB21 / AMB22 / AMB23 / BW16] x 1"
msgstr ""

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:13 UART
msgid "Android / iOS smartphone"
msgstr ""

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:15 UART
msgid ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **Example** :raw-"
"html:`</p>`"
msgstr ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **范例说明** :raw-"
"html:`</p>`"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:19 UART
msgid "**Introduction**"
msgstr "**介绍**"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:21 UART
msgid ""
"With BLE, application data is sent and received using the GATT system. "
"GATT uses services, characteristics, and attributes to organise data and "
"control how the data can be read from and written to. The Bluetooth SIG "
"specification for BLE includes several predefined services for common "
"applications, but users are free to implement custom services and "
"characteristics to best fit their data structure and application needs."
msgstr ""
"BLE可以使用GATT系统发送和接收应用程序数据。 "
"GATT使用服务，特征和属性来组织数据并控制如何读取和写入数据。BLE的蓝牙SIG规范包括针对常见应用的几种定义服务，但用户可以依据适合其数据结构和应用需求来自由实施自定义服务和特性。"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:29 UART
msgid ""
"In this example, the BLEService and BLECharacteristic classes are used to"
" implement a custom service for transmitting ASCII characters similar to "
"regular UART. This custom service is the Nordic UART Service, which is "
"supported in several smartphone apps."
msgstr ""
"在此范例中，BLEService和BLECharacteristic用于实现类似于常规UART传输ASCII字符的自定义服务。此自定义服务是在多个智能手机应用程序中受支持的Nordic"
" UART服务。"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:34 UART
msgid "**Procedure**"
msgstr "**流程**"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:36 UART
msgid ""
"Ensure that a compatible BLE UART app is installed on your smartphone, it"
" is available at:"
msgstr "确保您的智能手机上已安装兼容的BLE UART应用程序，该应用程序可在以下位置获得："

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:39 UART
msgid ""
"– Google Play Store: "
"https://play.google.com/store/apps/details?id=com.adafruit.bluefruit.le.connect"
" "
"https://play.google.com/store/apps/details?id=de.kai_morich.serial_bluetooth_terminal"
msgstr ""

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:43 UART
msgid ""
"– Apple App Store: https://apps.apple.com/us/app/bluefruit-"
"connect/id830125974"
msgstr ""

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:46 UART
msgid ""
"Open the example, ``“Files” → “Examples” → “AmebaBLE” → "
"“BLEUartService”``."
msgstr "打开范例, “Files” -> “Examples” -> “AmebaBLE” -> “BLEUartService”."

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:55 UART
msgid ""
"Upload the code and press the reset button on Ameba once the upload is "
"finished. Open the app on your smartphone, scan and connect to the Ameba "
"board shown as “AMEBA_BLE_DEV” and choose the UART function in the app. "
"Note that the BLE UART service on the Ameba board will only work with the"
" UART and Plotter functions in the Bluefruit Connect app, other functions"
" (Pin I/O, Image Transfer) require other BLE services that are not "
"included in this example."
msgstr ""
"在手机上打开应用程序，扫描并连接到显示为“AMEBA_BLE_DEV”的Ameba开发板，然后在应用程序中选择UART功能。请注意，Ameba板上的BLE"
" UART服务仅可与Bluefruit Connect应用程序中的UART和Plotter功能一起使用，其他功能（Pin "
"I/O，图像传输）需要此范例中未包括的其他BLE服务。"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:76 UART
msgid ""
"In the UART terminal section of the app, enter a message and click send. "
"You should see the message appear in the Arduino serial monitor. In the "
"Arduino serial monitor, enter a message and click send. The message will "
"appear in the smartphone app."
msgstr ""

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:92 UART
msgid ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **Code "
"Reference** :raw-html:`</p>`"
msgstr ""
":raw-html:`<p style=\"color:#E67E22; font-size:24px\">` **程式码说明** :raw-"
"html:`</p>`"

#: - ../../source/ambd_arduino/examples/network/BLE BLE Service.rst:96 UART
msgid ""
"The BLECharacteristic class is used to create two characteristics, one "
"for receive (Rx) and one for transmit (Tx), and added to a service "
"created with the BLEService class. The required read/write/notify "
"properties are set for each characteristic using the ``set__Property()`` "
"methods, and callback functions are registered using the "
"``set__Callback()`` methods. The required buffer size is also set for "
"each characteristic so that it has enough memory to store a complete "
"string. When data is written to the receive characteristic, the "
"registered callback function is called, which prints out the received "
"data as a string to the serial monitor. When data is received on the "
"serial port, it is copied into the transmit characteristic buffer, and "
"the ``notify()`` method is used to inform the connected device of the new"
" data."
msgstr ""

#~ msgid "– Google Play Store:"
#~ msgstr ""

#~ msgid "https://play.google.com/store/apps/details?id=com.adafruit.bluefruit.le.connect"
#~ msgstr ""

#~ msgid "https://play.google.com/store/apps/details?id=de.kai_morich.serial_bluetooth_terminal"
#~ msgstr ""

#~ msgid "– Apple App Store:"
#~ msgstr ""

#~ msgid "https://apps.apple.com/us/app/bluefruit-connect/id830125974"
#~ msgstr ""

#~ msgid "|1|"
#~ msgstr ""

#~ msgid "1"
#~ msgstr ""

#~ msgid ""
#~ "Upload the code and press the "
#~ "reset button on Ameba once the "
#~ "upload is finished."
#~ msgstr "上传代码并在上传完成后按Ameba上的重置按钮。"

#~ msgid "|2|"
#~ msgstr ""

#~ msgid "2"
#~ msgstr ""

#~ msgid "|3|"
#~ msgstr ""

#~ msgid "3"
#~ msgstr ""

#~ msgid ""
#~ "In the UART terminal section of "
#~ "the app, enter a message and click"
#~ " send. You should see the message "
#~ "appear in the Arduino serial monitor."
#~ msgstr "在应用程序的UART终端部分中，输入一条消息，然后单击发送。您应该看到消息出现在Arduino串行监视器中。"

#~ msgid ""
#~ "In the Arduino serial monitor, enter "
#~ "a message and click send. The "
#~ "message will appear in the smartphone"
#~ " app."
#~ msgstr "在Arduino串行监视器中，输入一条消息，然后单击发送。该消息将出现在手机应用程序中。"

#~ msgid "|4|"
#~ msgstr ""

#~ msgid "4"
#~ msgstr ""

#~ msgid "|5|"
#~ msgstr ""

#~ msgid "5"
#~ msgstr ""

#~ msgid ""
#~ "The BLECharacteristic class is used to"
#~ " create two characteristics, one for "
#~ "receive (Rx) and one for transmit "
#~ "(Tx), and added to a service "
#~ "created with the BLEService class."
#~ msgstr "BLECharacteristic用于创建两个特征，一个用于接收（Rx），一个用于发送（Tx），并添加到使用BLEService创建的服务中。"

#~ msgid ""
#~ "The required read/write/notify properties are"
#~ " set for each characteristic using "
#~ "the ``set__Property()`` methods, and callback"
#~ " functions are registered using the "
#~ "``set__Callback()`` methods. The required "
#~ "buffer size is also set for each"
#~ " characteristic so that it has enough"
#~ " memory to store a complete string."
#~ msgstr ""
#~ "使用 ``set__Property（）`` 方法为每个特征设置所需的读/写/通知属性，并使用 "
#~ "``set__Callback（）`` "
#~ "方法注册回调函数。还为每个特征设置了所需的缓冲区大小，以便它有足够的内存来存储完整的字符串。"

#~ msgid ""
#~ "When data is written to the "
#~ "receive characteristic, the registered "
#~ "callback function is called, which "
#~ "prints out the received data as a"
#~ " string to the serial monitor."
#~ msgstr "将数据写入接收特性时，将调用已注册的回调函数，该函数将接收到的数据作为字符串输出到串行监视器。"

#~ msgid ""
#~ "When data is received on the "
#~ "serial port, it is copied into the"
#~ " transmit characteristic buffer, and the"
#~ " ``notify()`` method is used to "
#~ "inform the connected device of the "
#~ "new data."
#~ msgstr "在串行端口上接收到数据后，会将其复制到发送特性缓冲区中，然后 ``notify（）`` 方法用于将新数据通知给连接的设备。"

