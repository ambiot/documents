# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Ameba IoT
# This file is distributed under the same license as the AmebaDocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AmebaDocs EPUB3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-10 10:15+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:2
msgid "Class FlashMemory"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:6
#: FlashMemoryClass.rst:50 FlashMemoryClass.rst:150 FlashMemoryClass.rst:192
#: FlashMemoryClass.rst:226 FlashMemoryClass.rst:261 FlashMemoryClass.rst:295
#: FlashMemoryClass.rst:332 FlashMemoryClass.rst:359
msgid "**Description**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:8
msgid "Defines a class of Flash memory API"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:10
#: FlashMemoryClass.rst:54 FlashMemoryClass.rst:154 FlashMemoryClass.rst:196
#: FlashMemoryClass.rst:230 FlashMemoryClass.rst:265 FlashMemoryClass.rst:300
#: FlashMemoryClass.rst:336 FlashMemoryClass.rst:363
msgid "**Syntax**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:16
msgid "**Members**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:19
msgid "**Public Constructors**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:21
msgid "Fl ashMemoryClass::FlashMemoryClass"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:21
msgid "Constructs a FlashMemoryClass object"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:24
msgid "Fla shMemoryClass::~FlashMemoryClass"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:24
msgid "Deconstructs a FlashMemoryClass object"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:27
msgid "**Public Methods**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:29
msgid "FlashMemoryClass::begin"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:29
msgid "Initialize/Re-initialize the base address and size"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:32
msgid "FlashMemoryClass::read"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:32
msgid "Read the content to buf"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:34
msgid "FlashMemoryClass::update"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:34
msgid "Write buf back to flash memory"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:36
msgid "FlashMemoryClass::readWord"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:36
msgid "Read 4 bytes from flash memory"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:38
msgid "FlashMemoryClass::writeWord"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:38
msgid "Write 4 bytes into flash memory"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:40
msgid "FlashMemoryClass::buf_size"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:40
msgid "The buf size"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:42
msgid "FlashMemoryClass::\\*buf"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:42
msgid "The buf to be operated"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:52
msgid "Constructs a FlashMemoryClass object."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:60
#: FlashMemoryClass.rst:160 FlashMemoryClass.rst:202 FlashMemoryClass.rst:236
#: FlashMemoryClass.rst:271 FlashMemoryClass.rst:306
msgid "**Parameters**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:62
msgid "``\\_base_address`` : The base address to operate."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:64
msgid ""
"``\\_buf_size`` : The buf size for mirror a copy to reduce flash memory "
"operation"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:66
#: FlashMemoryClass.rst:166 FlashMemoryClass.rst:206 FlashMemoryClass.rst:240
#: FlashMemoryClass.rst:275 FlashMemoryClass.rst:312
msgid "**Returns**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:68
#: FlashMemoryClass.rst:168 FlashMemoryClass.rst:208 FlashMemoryClass.rst:242
#: FlashMemoryClass.rst:314
msgid "The function returns nothing."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:70
#: FlashMemoryClass.rst:170 FlashMemoryClass.rst:210 FlashMemoryClass.rst:244
#: FlashMemoryClass.rst:279 FlashMemoryClass.rst:316 FlashMemoryClass.rst:342
#: FlashMemoryClass.rst:369
msgid "**Example Code**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:72
#: FlashMemoryClass.rst:172 FlashMemoryClass.rst:212 FlashMemoryClass.rst:246
msgid "Example: FleshMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:74
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes. Direct read from flash memory is allowed. To write data into flash"
" memory, each bit on flash memory can only change from ‘1’ to ‘0’ and it "
"cannot change from ‘0’ to ‘1’. To make sure the data are correctly "
"written we do erase the flash memory sector before write data on it."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:79
msgid "FlashMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:105
#: FlashMemoryClass.rst:179 FlashMemoryClass.rst:281 FlashMemoryClass.rst:318
msgid "Example: ReadWriteOneWord"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:107
msgid ""
"This example shows how to request flash memory larger than default "
"0x4000, and read/write one specific word (32-bit)."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:110
msgid "ReadWriteOneWord"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:141
#: FlashMemoryClass.rst:183 FlashMemoryClass.rst:217 FlashMemoryClass.rst:252
#: FlashMemoryClass.rst:286 FlashMemoryClass.rst:323 FlashMemoryClass.rst:350
#: FlashMemoryClass.rst:373
msgid "**Notes and Warnings**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:143
#: FlashMemoryClass.rst:185 FlashMemoryClass.rst:219 FlashMemoryClass.rst:254
#: FlashMemoryClass.rst:288 FlashMemoryClass.rst:325 FlashMemoryClass.rst:352
#: FlashMemoryClass.rst:375
msgid "Include “FlashMemory.h” to use the class function."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:152
msgid ""
"Initialize/Re-initialize the base address and size. The base address "
"shell aligns with the size of 0x1000. And the size shell is multiple of "
"0x1000."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:162
msgid "``_base_address``: The base address"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:164
msgid "``_buf_size`` : The desired work size"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:174
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:181
#: FlashMemoryClass.rst:283 FlashMemoryClass.rst:320
msgid ""
"This example shows how to request flash memory larger than default "
"0x4000, and read/write one specific word (32-bit). Details of the example"
" codes can be found in the previous section of ``FlashMemoryClass:: "
"FlashMemoryClass``."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:194
msgid ""
"Read the content to buf. Read flash memory into the buf. The size would "
"be 0x1000."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:204
msgid "The function requires no input parameter."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:214
#: FlashMemoryClass.rst:248 FlashMemoryClass.rst:346
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes. Details of the example codes can be found in the previous section "
"of ``FlashMemoryClass:: FlashMemoryClass``."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:228
msgid ""
"Write buf back to flash memory. Write flash memory with the content of "
"the buffer. The size is 0x1000."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:238
msgid ""
"``erase``: By default, it is true and erases flash memory before writing "
"to it"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:263
msgid ""
"Read 4 bytes from flash memory. Read 4 byte from specific offset based on"
" base address."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:273
#: FlashMemoryClass.rst:308
msgid "``offset`` : The offset according to the base address"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:277
msgid "The read data with a size of 4 bytes"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:297
msgid ""
"Write 4 bytes into flash memory. It will try to write 4 bytes first. If "
"the read data differ from the write data, then we buffer the sector of "
"flash memory, erase it, and write correct data back to it."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:310
msgid "``data`` : The data to be written"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:334
msgid "The buf size (It can be regarded as work size)."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:344
msgid "Example: FlashMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:361
msgid ""
"The buf to be operated. Modify buf won’t change the content of the buf. "
"It needs an update to write back to flash memory."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class FlashMemoryClass.rst:371
msgid "NA"
msgstr ""

#~ msgid "Class EpdIF"
#~ msgstr ""

#~ msgid "**FlashMemoryClass Class**"
#~ msgstr ""

#~ msgid "class FlashMemoryClass"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::FlashMemoryClass**"
#~ msgstr ""

#~ msgid ""
#~ "FlashMemoryClass(unsigned int \\_base_address, "
#~ "unsigned int \\_buf_size);"
#~ msgstr ""

#~ msgid "\\_base_address: The base address to operate."
#~ msgstr ""

#~ msgid ""
#~ "\\_buf_size: The buf size for mirror "
#~ "a copy to reduce flash memory "
#~ "operation"
#~ msgstr ""

#~ msgid ""
#~ "Direct read from flash memory is "
#~ "allowed. To write data into flash "
#~ "memory, each bit on flash memory "
#~ "can only change from ‘1’ to ‘0’"
#~ " and it cannot change from ‘0’ "
#~ "to ‘1’. To make sure the data "
#~ "are correctly written we do erase "
#~ "the flash memory sector before write "
#~ "data on it."
#~ msgstr ""

#~ msgid "**#include <FlashMemory.h>**"
#~ msgstr ""

#~ msgid "**void** setup() {"
#~ msgstr ""

#~ msgid "FlashMemory.read();"
#~ msgstr ""

#~ msgid "**if** (FlashMemory.buf[0] == *0xFF*) {"
#~ msgstr ""

#~ msgid "FlashMemory.buf[0] = *0x00*;"
#~ msgstr ""

#~ msgid "FlashMemory.update();"
#~ msgstr ""

#~ msgid "Serial.println(\"write count to 0\");"
#~ msgstr ""

#~ msgid "} **else** {"
#~ msgstr ""

#~ msgid "FlashMemory.buf[0]++;"
#~ msgstr ""

#~ msgid "Serial.print(\"Boot count: \");"
#~ msgstr ""

#~ msgid "Serial.println(FlashMemory.buf[0]);"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "**void** loop() {"
#~ msgstr ""

#~ msgid "delay(1000);"
#~ msgstr ""

#~ msgid "unsigned **int** value;"
#~ msgstr ""

#~ msgid "/\\* request flash size 0x4000 from 0xFC000 \\*/"
#~ msgstr ""

#~ msgid "FlashMemory.begin(*0xFC000*, *0x4000*);"
#~ msgstr ""

#~ msgid "/\\* read one word (32-bit) from 0xFC000 plus offset 0x3F00 \\*/"
#~ msgstr ""

#~ msgid "value = FlashMemory.readWord(*0x3F00*);"
#~ msgstr ""

#~ msgid "printf(\"value is 0x%08X\\r\\n\", value);"
#~ msgstr ""

#~ msgid "**if** (value == *0xFFFFFFFF*) {"
#~ msgstr ""

#~ msgid "value = 0;"
#~ msgstr ""

#~ msgid "value++;"
#~ msgstr ""

#~ msgid "/\\* write one word (32-bit) to 0xFC000 plus offset 0x3F00 \\*/"
#~ msgstr ""

#~ msgid "FlashMemory.writeWord(*0x3F00*, value);"
#~ msgstr ""

#~ msgid "// put your main code here, to run repeatedly:"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::begin**"
#~ msgstr ""

#~ msgid "void begin(unsigned int \\_base_address, unsigned int \\_buf_size);"
#~ msgstr ""

#~ msgid "\\_base_address: The base address"
#~ msgstr ""

#~ msgid "\\_buf_size: The desired work size"
#~ msgstr ""

#~ msgid ""
#~ "Details of the example codes can "
#~ "be found in the previous section "
#~ "of “FlashMemoryClass:: FlashMemoryClass”."
#~ msgstr ""

#~ msgid "**FlashMemoryClass::read**"
#~ msgstr ""

#~ msgid "void read(void);"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::update**"
#~ msgstr ""

#~ msgid "void update(bool erase = true);"
#~ msgstr ""

#~ msgid ""
#~ "erase: By default, it is true and"
#~ " erases flash memory before writing "
#~ "to it"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::readWord**"
#~ msgstr ""

#~ msgid "unsigned int readWord(unsigned int offset);"
#~ msgstr ""

#~ msgid "offset: The offset according to the base address"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::writeWord**"
#~ msgstr ""

#~ msgid "void writeWord(unsigned int offset, unsigned int data);"
#~ msgstr ""

#~ msgid "data: The data to be written"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::buf_size**"
#~ msgstr ""

#~ msgid "unsigned int buf_size;"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::*buf**"
#~ msgstr ""

#~ msgid "unsigned char \\*buf;"
#~ msgstr ""

