# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Ameba IoT
# This file is distributed under the same license as the AmebaDocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AmebaDocs EPUB3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-13 02:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:3
msgid "Class Adafruit_GPS"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:7
#: Adafruit_GPS.rst:67 Adafruit_GPS.rst:215 Adafruit_GPS.rst:248
#: Adafruit_GPS.rst:281 Adafruit_GPS.rst:313 Adafruit_GPS.rst:343
#: Adafruit_GPS.rst:376 Adafruit_GPS.rst:406 Adafruit_GPS.rst:436
#: Adafruit_GPS.rst:469 Adafruit_GPS.rst:499 Adafruit_GPS.rst:529
#: Adafruit_GPS.rst:559 Adafruit_GPS.rst:590 Adafruit_GPS.rst:620
#: Adafruit_GPS.rst:650
msgid "**Description**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:9
msgid "Defines a class to use GPS module on Ameba."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:11
#: Adafruit_GPS.rst:72 Adafruit_GPS.rst:219 Adafruit_GPS.rst:252
#: Adafruit_GPS.rst:285 Adafruit_GPS.rst:317 Adafruit_GPS.rst:347
#: Adafruit_GPS.rst:380 Adafruit_GPS.rst:410 Adafruit_GPS.rst:440
#: Adafruit_GPS.rst:473 Adafruit_GPS.rst:503 Adafruit_GPS.rst:533
#: Adafruit_GPS.rst:563 Adafruit_GPS.rst:594 Adafruit_GPS.rst:624
#: Adafruit_GPS.rst:654
msgid "**Syntax**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:13
msgid "class Adafruit_GPS"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:15
msgid "**Members**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:18
msgid "**Public Constructors**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:20
msgid "Adafruit_GPS::Adafruit_GPS"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:20
msgid "Constructs an Adafruit_GPS object"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:22
msgid "**Public Methods**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:24
msgid "Adafruit_GPS::begin"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:24
#: Adafruit_GPS.rst:217
msgid "Initialize serial communication"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:26
msgid "\\*Adafruit_GPS:: lastNMEA"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:26
#: Adafruit_GPS.rst:250
msgid "Returns the last NMEA line received and unsets the received flag"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:30
msgid "Adafruit_GPS:: newNMEAreceived"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:30
#: Adafruit_GPS.rst:283
msgid "Check to see if a new NMEA line has been received"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:33
msgid "Adafruit_GPS:: common_init"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:33
#: Adafruit_GPS.rst:315
msgid "Initialization code used by all constructor types"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:36
msgid "Adafruit_GPS:: sendCommand"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:36
#: Adafruit_GPS.rst:345
msgid "Send a command to the GPS device"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:38
msgid "Adafruit_GPS:: pause"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:38
#: Adafruit_GPS.rst:378
msgid "Pause/unpause receiving new data"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:40
msgid "Adafruit_GPS:: parseHex"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:40
#: Adafruit_GPS.rst:408
msgid "Read a Hex value and return the decimal equivalent"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:43
msgid "Adafruit_GPS:: read"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:43
#: Adafruit_GPS.rst:438
msgid "Read one character from the GPS device"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:46
msgid "Adafruit_GPS:: parse"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:46
#: Adafruit_GPS.rst:471
msgid "Parse an NMEA string"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:48
msgid "Adafruit_GPS:: wakeup"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:48
#: Adafruit_GPS.rst:501
msgid "Wake the sensor up"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:50
msgid "Adafruit_GPS:: standby"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:50
#: Adafruit_GPS.rst:531
msgid "Standby Mode Switches"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:52
msgid "Adafruit_GPS::waitForSentence"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:52
#: Adafruit_GPS.rst:561
msgid "Wait for a specified sentence from the device"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:55
msgid "Adafruit_GPS::LOCUS_StartLogger"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:55
#: Adafruit_GPS.rst:592
msgid "Start the LOCUS logger"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:57
msgid "Adafruit_GPS::LOCUS_StopLogger"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:57
#: Adafruit_GPS.rst:622
msgid "Stop the LOCUS logger"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:59
msgid "Adafruit_GPS::LOCUS_ReadStatus"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:59
#: Adafruit_GPS.rst:652
msgid "Read the logger status"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:69
msgid ""
"Constructs an Adafruit_GPS object and initialize serial using a "
"SoftSerial object."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:74
msgid "Adafruit_GPS::Adafruit_GPS(SoftwareSerial \\*ser)"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:76
msgid "Adafruit_GPS::Adafruit_GPS(HardwareSerial \\*ser)"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:78
#: Adafruit_GPS.rst:225 Adafruit_GPS.rst:258 Adafruit_GPS.rst:291
#: Adafruit_GPS.rst:323 Adafruit_GPS.rst:353 Adafruit_GPS.rst:386
#: Adafruit_GPS.rst:416 Adafruit_GPS.rst:446 Adafruit_GPS.rst:479
#: Adafruit_GPS.rst:509 Adafruit_GPS.rst:539 Adafruit_GPS.rst:569
#: Adafruit_GPS.rst:600 Adafruit_GPS.rst:630 Adafruit_GPS.rst:660
msgid "**Parameters**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:80
msgid "``ser`` : a Serial instance"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:82
#: Adafruit_GPS.rst:229 Adafruit_GPS.rst:262 Adafruit_GPS.rst:295
#: Adafruit_GPS.rst:327 Adafruit_GPS.rst:357 Adafruit_GPS.rst:390
#: Adafruit_GPS.rst:420 Adafruit_GPS.rst:450 Adafruit_GPS.rst:483
#: Adafruit_GPS.rst:513 Adafruit_GPS.rst:543 Adafruit_GPS.rst:574
#: Adafruit_GPS.rst:604 Adafruit_GPS.rst:634 Adafruit_GPS.rst:664
msgid "**Returns**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:84
#: Adafruit_GPS.rst:231 Adafruit_GPS.rst:329 Adafruit_GPS.rst:359
#: Adafruit_GPS.rst:392
msgid "The function returns nothing."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:86
#: Adafruit_GPS.rst:233 Adafruit_GPS.rst:266 Adafruit_GPS.rst:299
#: Adafruit_GPS.rst:331 Adafruit_GPS.rst:361 Adafruit_GPS.rst:394
#: Adafruit_GPS.rst:424 Adafruit_GPS.rst:454 Adafruit_GPS.rst:487
#: Adafruit_GPS.rst:517 Adafruit_GPS.rst:547 Adafruit_GPS.rst:578
#: Adafruit_GPS.rst:608 Adafruit_GPS.rst:638 Adafruit_GPS.rst:668
msgid "**Example Code**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:88
msgid ""
"This example code from Adafruit demonstrates GPS modules using "
"MTK3329/MTK3339 driver. This code shows how to listen to the GPS module "
"in an interrupt which allows the program to have more ‘freedom’ – just "
"parse when a new NMEA sentence is available! Then access data when "
"desired."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:94
msgid "Adafruit_GPS_parsing.ino"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:206
#: Adafruit_GPS.rst:240 Adafruit_GPS.rst:273 Adafruit_GPS.rst:305
#: Adafruit_GPS.rst:335 Adafruit_GPS.rst:368 Adafruit_GPS.rst:398
#: Adafruit_GPS.rst:428 Adafruit_GPS.rst:461 Adafruit_GPS.rst:491
#: Adafruit_GPS.rst:521 Adafruit_GPS.rst:551 Adafruit_GPS.rst:582
#: Adafruit_GPS.rst:612 Adafruit_GPS.rst:642 Adafruit_GPS.rst:672
msgid "**Notes and Warnings**"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:209
msgid "SoftSerial is using hardware serial so pin mapping cannot be altered."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:227
msgid "``baud`` : serial baud rate"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:235
#: Adafruit_GPS.rst:268 Adafruit_GPS.rst:363 Adafruit_GPS.rst:456
#: Adafruit_GPS.rst:489
msgid "Example: Adafruit_GPS_parsing"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:237
#: Adafruit_GPS.rst:270 Adafruit_GPS.rst:365 Adafruit_GPS.rst:458
msgid ""
"The details of the code can be found in the previous section of "
"Adafruit_GPS:: Adafruit_GPS."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:242
#: Adafruit_GPS.rst:275 Adafruit_GPS.rst:307 Adafruit_GPS.rst:333
#: Adafruit_GPS.rst:337 Adafruit_GPS.rst:370 Adafruit_GPS.rst:396
#: Adafruit_GPS.rst:400 Adafruit_GPS.rst:426 Adafruit_GPS.rst:430
#: Adafruit_GPS.rst:463 Adafruit_GPS.rst:493 Adafruit_GPS.rst:519
#: Adafruit_GPS.rst:523 Adafruit_GPS.rst:549 Adafruit_GPS.rst:553
#: Adafruit_GPS.rst:580 Adafruit_GPS.rst:584 Adafruit_GPS.rst:610
#: Adafruit_GPS.rst:614 Adafruit_GPS.rst:640 Adafruit_GPS.rst:644
#: Adafruit_GPS.rst:670 Adafruit_GPS.rst:674
msgid "NA"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:260
#: Adafruit_GPS.rst:293 Adafruit_GPS.rst:325 Adafruit_GPS.rst:448
#: Adafruit_GPS.rst:511 Adafruit_GPS.rst:541 Adafruit_GPS.rst:602
#: Adafruit_GPS.rst:632 Adafruit_GPS.rst:662
msgid "The function requires no input parameter."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:264
msgid "Pointer to the last line string"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:297
msgid "True if received, false if not"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:301
msgid ""
"Example: Adafruit_GPS_parsing The details of the code can be found in the"
" previous section of Adafruit_GPS:: Adafruit_GPS."
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:355
msgid "``str`` : Pointer to a string holding the command to send"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:388
msgid "``p`` : True = pause, false = unpause"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:418
msgid "``c`` : Hex value"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:422
msgid "The decimal equivalent of the Hex value"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:452
msgid "The character that we received, or 0 if nothing was available"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:481
msgid "``nmea`` : an NMEA string"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:485
msgid "True if we parsed it, false if it has invalid data"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:515
msgid "True if woken up, false if not in standby or failed to wake"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:545
msgid "False if already in standby, true if it entered standby"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:571
msgid ""
"wait4me: Pointer to a string holding the desired response max: How long "
"to wait, default is MAXWAITSENTENCE"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:576
msgid "True if we got what we wanted, false otherwise"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:606
#: Adafruit_GPS.rst:636
msgid "True on success, false if it failed"
msgstr ""

#: ../../source/ambd_arduino/AMB21/api_documents/Class Adafruit_GPS.rst:666
msgid "True if we read the data, false if there was no response"
msgstr ""

#~ msgid "**Adafruit_GPS Class**"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::Adafruit_GPS**"
#~ msgstr ""

#~ msgid "Adafruit_GPS::Adafruit_GPS(SoftwareSerial \\*ser)"
#~ msgstr ""

#~ msgid "Adafruit_GPS::Adafruit_GPS(HardwareSerial \\*ser)"
#~ msgstr ""

#~ msgid "ser: a Serial instance"
#~ msgstr ""

#~ msgid "**#include <Adafruit_GPS.h>**"
#~ msgstr ""

#~ msgid "**#include <SoftwareSerial.h>**"
#~ msgstr ""

#~ msgid "// If you're using a GPS module:"
#~ msgstr ""

#~ msgid "// Connect the GPS Power pin to 3.3V"
#~ msgstr ""

#~ msgid "// Connect the GPS Ground pin to ground"
#~ msgstr ""

#~ msgid "// Connect the GPS TX (transmit) pin to Digital 0"
#~ msgstr ""

#~ msgid "// Connect the GPS RX (receive) pin to Digital 1"
#~ msgstr ""

#~ msgid "**#if defined(BOARD_RTL8195A)**"
#~ msgstr ""

#~ msgid "SoftwareSerial mySerial(0, 1);"
#~ msgstr ""

#~ msgid "**#elif defined(BOARD_RTL8710)**"
#~ msgstr ""

#~ msgid ""
#~ "SoftwareSerial mySerial(17, 5); // RTL8710 "
#~ "need change GPS TX/RX to pin 17"
#~ " and 5"
#~ msgstr ""

#~ msgid "**#else**"
#~ msgstr ""

#~ msgid "**#endif**"
#~ msgstr ""

#~ msgid "Adafruit_GPS GPS(&mySerial);"
#~ msgstr ""

#~ msgid ""
#~ "// Set GPSECHO to 'false' to turn"
#~ " off echoing the GPS data to "
#~ "the Serial console"
#~ msgstr ""

#~ msgid ""
#~ "// Set to 'true' if you want "
#~ "to debug and listen to the raw "
#~ "GPS sentences."
#~ msgstr ""

#~ msgid "**#define GPSECHO false**"
#~ msgstr ""

#~ msgid "**void** setup()"
#~ msgstr ""

#~ msgid "{"
#~ msgstr ""

#~ msgid "Serial.begin(38400);"
#~ msgstr ""

#~ msgid "Serial.println(\"Adafruit GPS library basic test!\");"
#~ msgstr ""

#~ msgid ""
#~ "// 9600 NMEA is the default baud"
#~ " rate for Adafruit MTK GPS's- some"
#~ " use 4800"
#~ msgstr ""

#~ msgid "GPS.begin(9600);"
#~ msgstr ""

#~ msgid ""
#~ "// uncomment this line to turn on"
#~ " RMC (recommended minimum) and GGA "
#~ "(fix data) including altitude"
#~ msgstr ""

#~ msgid "GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);"
#~ msgstr ""

#~ msgid "// uncomment this line to turn on only the \"minimum recommended\" data"
#~ msgstr ""

#~ msgid "//GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);"
#~ msgstr ""

#~ msgid ""
#~ "// For parsing data, we don't "
#~ "suggest using anything but either RMC"
#~ " only or RMC+GGA since"
#~ msgstr ""

#~ msgid "// the parser doesn't care about other sentences at this time"
#~ msgstr ""

#~ msgid "// Set the update rate"
#~ msgstr ""

#~ msgid "GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate"
#~ msgstr ""

#~ msgid ""
#~ "// For the parsing code to work"
#~ " nicely and have time to sort "
#~ "thru the data, and"
#~ msgstr ""

#~ msgid "// print it out we don't suggest using anything higher than 1 Hz"
#~ msgstr ""

#~ msgid "// Request updates on antenna status, comment out to keep quiet"
#~ msgstr ""

#~ msgid "GPS.sendCommand(PGCMD_ANTENNA);"
#~ msgstr ""

#~ msgid "delay(1000);"
#~ msgstr ""

#~ msgid "// Ask for firmware version"
#~ msgstr ""

#~ msgid "mySerial.println(PMTK_Q_RELEASE);"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "**uint32_t** timer = millis();"
#~ msgstr ""

#~ msgid "**void** loop() // run over and over again"
#~ msgstr ""

#~ msgid "// in case you are not using the interrupt above, you'll"
#~ msgstr ""

#~ msgid "// need to 'hand query' the GPS, not suggested :("
#~ msgstr ""

#~ msgid "// read data from the GPS in the 'main loop'"
#~ msgstr ""

#~ msgid "**char** c = GPS.read();"
#~ msgstr ""

#~ msgid "// if you want to debug, this is a good time to do it!"
#~ msgstr ""

#~ msgid "**if** (GPSECHO)"
#~ msgstr ""

#~ msgid "**if** (c) Serial.print(c);"
#~ msgstr ""

#~ msgid "// if a sentence is received, we can check the checksum, parse it..."
#~ msgstr ""

#~ msgid "**if** (GPS.newNMEAreceived()) {"
#~ msgstr ""

#~ msgid "// a tricky thing here is if we print the NMEA sentence, or data"
#~ msgstr ""

#~ msgid "// we end up not listening and catching other sentences!"
#~ msgstr ""

#~ msgid "// so be very wary if using OUTPUT_ALLDATA and trytng to print out data"
#~ msgstr ""

#~ msgid ""
#~ "//Serial.println(GPS.lastNMEA()); // this also "
#~ "sets the newNMEAreceived() flag to false"
#~ msgstr ""

#~ msgid ""
#~ "**if** (!GPS.parse(GPS.lastNMEA())) // this "
#~ "also sets the newNMEAreceived() flag to"
#~ " false"
#~ msgstr ""

#~ msgid ""
#~ "**return**; // we can fail to "
#~ "parse a sentence in which case we"
#~ " should just wait for another"
#~ msgstr ""

#~ msgid "// if millis() or timer wraps around, we'll just reset it"
#~ msgstr ""

#~ msgid "**if** (timer > millis()) timer = millis();"
#~ msgstr ""

#~ msgid "// approximately every 2 seconds or so, print out the current stats"
#~ msgstr ""

#~ msgid "**if** (millis() - timer > 2000) {"
#~ msgstr ""

#~ msgid "timer = millis(); // reset the timer"
#~ msgstr ""

#~ msgid "Serial.print(\"\\nTime: \");"
#~ msgstr ""

#~ msgid "Serial.print(GPS.hour, DEC); Serial.print(':');"
#~ msgstr ""

#~ msgid "Serial.print(GPS.minute, DEC); Serial.print(':');"
#~ msgstr ""

#~ msgid "Serial.print(GPS.seconds, DEC); Serial.print('.');"
#~ msgstr ""

#~ msgid "Serial.println(GPS.milliseconds);"
#~ msgstr ""

#~ msgid "Serial.print(\"Date: \");"
#~ msgstr ""

#~ msgid "Serial.print(GPS.day, DEC); Serial.print('/');"
#~ msgstr ""

#~ msgid "Serial.print(GPS.month, DEC); Serial.print(\"/20\");"
#~ msgstr ""

#~ msgid "Serial.println(GPS.year, DEC);"
#~ msgstr ""

#~ msgid "Serial.print(\"Fix: \"); Serial.print((**int**)GPS.fix);"
#~ msgstr ""

#~ msgid "Serial.print(\" quality: \"); Serial.println((**int**)GPS.fixquality);"
#~ msgstr ""

#~ msgid "**if** (GPS.fix) {"
#~ msgstr ""

#~ msgid "Serial.print(\"Location: \");"
#~ msgstr ""

#~ msgid "Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);"
#~ msgstr ""

#~ msgid "Serial.print(\", \");"
#~ msgstr ""

#~ msgid "Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);"
#~ msgstr ""

#~ msgid "Serial.print(\"Location (in degrees, works with Google Maps): \");"
#~ msgstr ""

#~ msgid "Serial.print(GPS.latitudeDegrees, 4);"
#~ msgstr ""

#~ msgid "Serial.println(GPS.longitudeDegrees, 4);"
#~ msgstr ""

#~ msgid "Serial.print(\"Speed (knots): \"); Serial.println(GPS.speed);"
#~ msgstr ""

#~ msgid "Serial.print(\"Angle: \"); Serial.println(GPS.angle);"
#~ msgstr ""

#~ msgid "Serial.print(\"Altitude: \"); Serial.println(GPS.altitude);"
#~ msgstr ""

#~ msgid ""
#~ "Serial.print(\"Satellites: \"); "
#~ "Serial.println((**int**)GPS.satellites);"
#~ msgstr ""

#~ msgid ""
#~ "IMPORTANT: SoftSerial is using hardware "
#~ "serial so pin mapping cannot be "
#~ "altered."
#~ msgstr ""

#~ msgid "**Adafruit_GPS::begin**"
#~ msgstr ""

#~ msgid "void Adafruit_GPS::begin(uint16_t baud)"
#~ msgstr ""

#~ msgid "baud: serial baud rate"
#~ msgstr ""

#~ msgid "**\\*Adafruit_GPS::lastNMEA**"
#~ msgstr ""

#~ msgid "char \\*Adafruit_GPS::lastNMEA(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::newNMEAreceived**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::newNMEAreceived(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::common_init**"
#~ msgstr ""

#~ msgid "void Adafruit_GPS::common_init(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::sendCommand**"
#~ msgstr ""

#~ msgid "void Adafruit_GPS::sendCommand(const char \\*str)"
#~ msgstr ""

#~ msgid "str: Pointer to a string holding the command to send"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::pause**"
#~ msgstr ""

#~ msgid "void Adafruit_GPS::pause(boolean p)"
#~ msgstr ""

#~ msgid "p: True = pause, false = unpause"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::parseHex**"
#~ msgstr ""

#~ msgid "uint8_t Adafruit_GPS::parseHex(char c)"
#~ msgstr ""

#~ msgid "c: Hex value"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::read**"
#~ msgstr ""

#~ msgid "char Adafruit_GPS::read(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::parse**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::parse(char \\*nmea)"
#~ msgstr ""

#~ msgid "nmea: an NMEA string"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::wakeup**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::wakeup(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::standby**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::standby(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::waitForSentence**"
#~ msgstr ""

#~ msgid ""
#~ "boolean Adafruit_GPS::waitForSentence(const char "
#~ "\\*wait4me, uint8_t max)"
#~ msgstr ""

#~ msgid "wait4me: Pointer to a string holding the desired response"
#~ msgstr ""

#~ msgid "max: How long to wait, default is MAXWAITSENTENCE"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::LOCUS_StartLogger**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::LOCUS_StartLogger(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::LOCUS_StopLogger**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::LOCUS_StopLogger(void)"
#~ msgstr ""

#~ msgid "**Adafruit_GPS::LOCUS_ReadStatus**"
#~ msgstr ""

#~ msgid "boolean Adafruit_GPS::LOCUS_ReadStatus(void)"
#~ msgstr ""

#~ msgid "``Adafruit_GPS::Adafruit_GPS(SoftwareSerial \\*ser)``"
#~ msgstr ""

#~ msgid "``Adafruit_GPS::Adafruit_GPS(HardwareSerial \\*ser)``"
#~ msgstr ""

#~ msgid "``char \\*Adafruit_GPS::lastNMEA(void0)``"
#~ msgstr ""

#~ msgid "``void Adafruit_GPS::sendCommand(const char\\*str)``"
#~ msgstr ""

#~ msgid "``void Adafruit_GPS::pause(boolean p)``"
#~ msgstr ""

#~ msgid "``boolean Adafruit_GPS::parse(char \\*nmea)``"
#~ msgstr ""

#~ msgid ""
#~ "``boolean Adafruit_GPS::waitForSentence(const char "
#~ "\\*wait4me, uint8_tmax)``"
#~ msgstr ""

