# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Ameba IoT
# This file is distributed under the same license as the AmebaDocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AmebaDocs EPUB3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-02 06:46+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:3
msgid "Class EpdIF"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:5 EpdIF.rst:70
#: EpdIF.rst:109 EpdIF.rst:148 EpdIF.rst:180 EpdIF.rst:211 EpdIF.rst:244
#: EpdIF.rst:276 EpdIF.rst:307 EpdIF.rst:338 EpdIF.rst:370
msgid "**Description**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:7
msgid "A class used to control the electronic paper display internal functions."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:9 EpdIF.rst:74
#: EpdIF.rst:113 EpdIF.rst:152 EpdIF.rst:184 EpdIF.rst:215 EpdIF.rst:248
#: EpdIF.rst:280 EpdIF.rst:311 EpdIF.rst:343 EpdIF.rst:374
msgid "**Syntax**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:15
msgid "**Members**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:18
msgid "**Public Constructors**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:20
msgid ""
"A public constructor should not be used as this class is intended to be a"
" singleton class. Access member functions using the object instance named"
" EpdIf."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:26
msgid "**Public Methods**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:28
msgid "EpdIf::EPD_Dis_Part"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:28
msgid "Put an image buffer to the frame memory, but not updating the display"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:32
msgid "EpdIf::EPD_SetFrame"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:32
msgid ""
"Put display data to the frame memory, usually used for setup text display"
" functions"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:36
msgid "EpdIf::EPD_SetRAMValue_BaseMap"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:36
msgid "To read image data stored in the RAM, but not display on the screen"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:39
msgid "EpdIf::EPD_SetFrameMemory"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:39
msgid "To read image data stored in the buffer, but not display on the screen"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:43
msgid "EpdIf::EPD_UpdateDisplay"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:43
msgid "Update the display"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:45
msgid "EpdIf::EPD_ClearScreen_White"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:45
msgid "Clear the frame memory with the White color, but not updating the display"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:49
msgid "EpdIf::EPD_ClearScreen_Black"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:49
msgid "Clear the frame memory with the Black color, but not updating the display"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:53
msgid "EpdIf::EPD_Busy"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:53
msgid "Wait until the Busy pin goes to low, which is the idle state"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:56
msgid "EpdIf::EPD_Reset"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:56
msgid ""
"Used for the Epaper module reset. Often used to awaken the module in deep"
" sleep"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:60
msgid "EpdIf::EPD_Sleep"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:60
msgid ""
"After this command is transmitted, the chip would enter the deep-sleep "
"mode to save power"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:72
msgid "Put an image buffer to the frame memory, but not updating the display."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:80 EpdIF.rst:119
#: EpdIF.rst:158 EpdIF.rst:190 EpdIF.rst:221 EpdIF.rst:254 EpdIF.rst:286
#: EpdIF.rst:317 EpdIF.rst:349 EpdIF.rst:380
msgid "**Parameters**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:82
msgid "``x_start`` : starting position of the x-axis"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:84
msgid "``y_start`` : starting position of the y-axis"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:86
msgid "``datas`` : data to be displayed on the e-paper module"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:88
msgid "``PART_COLUMN`` : height of the display area"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:90
msgid "``PART_LINE`` : width of the display area"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:92 EpdIF.rst:131
#: EpdIF.rst:162 EpdIF.rst:194 EpdIF.rst:225 EpdIF.rst:258 EpdIF.rst:290
#: EpdIF.rst:321 EpdIF.rst:353 EpdIF.rst:384
msgid "**Returns**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:94 EpdIF.rst:133
#: EpdIF.rst:164 EpdIF.rst:196 EpdIF.rst:227 EpdIF.rst:260 EpdIF.rst:292
#: EpdIF.rst:323 EpdIF.rst:355 EpdIF.rst:386
msgid "The function returns nothing."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:96 EpdIF.rst:135
#: EpdIF.rst:166 EpdIF.rst:198 EpdIF.rst:229 EpdIF.rst:262 EpdIF.rst:294
#: EpdIF.rst:325 EpdIF.rst:357 EpdIF.rst:388
msgid "**Example Code**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:98 EpdIF.rst:102
#: EpdIF.rst:137 EpdIF.rst:141 EpdIF.rst:168 EpdIF.rst:172 EpdIF.rst:200
#: EpdIF.rst:204 EpdIF.rst:231 EpdIF.rst:264 EpdIF.rst:296 EpdIF.rst:327
#: EpdIF.rst:359 EpdIF.rst:363 EpdIF.rst:390 EpdIF.rst:394
msgid "NA"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:100 EpdIF.rst:139
#: EpdIF.rst:170 EpdIF.rst:202 EpdIF.rst:233 EpdIF.rst:266 EpdIF.rst:298
#: EpdIF.rst:329 EpdIF.rst:361 EpdIF.rst:392
msgid "**Notes and Warnings**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:111
msgid ""
"Put display data to the frame memory, usually used for setup text display"
" functions."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:121
msgid ""
"``image_buffer`` : the buffer which stores the data to be displayed on "
"the e-paper module, usually used to display texts."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:123
msgid "``x`` : starting position of the x-axis"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:125
msgid "``y`` : starting position of the y-axis"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:127
msgid "``image_width`` : width of the display area"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:129
msgid "``image_height`` : height of the display area"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:150
msgid "To read image data stored in the RAM, but not display on the screen."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:160
msgid ""
"``datas`` : contains the black and white information that forms the image"
" stored in RAM"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:182
msgid "To read image data stored in the buffer but not display on the screen."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:192
msgid ""
"``image_buffer``: the buffer where stores the image data in hexadecimal "
"numbers"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:213
msgid ""
"Update the ePaper display module. Always combined used with functions set"
" the frames."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:223 EpdIF.rst:256
#: EpdIF.rst:288 EpdIF.rst:319 EpdIF.rst:351 EpdIF.rst:382
msgid "The function requires no input parameter."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:235
msgid ""
"There are 2 memory areas embedded in the e-paper display but once this "
"function is called, then the next action of SetFrameMemory or ClearScreen"
" will set the other memory area."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:246
msgid "Clear the frame memory with the White color."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:268 EpdIF.rst:300
#: EpdIF.rst:331
msgid ""
"If the users want to see the actual display on the e-paper screen, the "
"function EPD_UpdateDisplay() is required to be added behind this code."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:278
msgid "Clear the frame memory with the Black color."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:309
msgid "Wait until the busy_pin goes to low, which is the idle state."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:340
msgid ""
"This command will let the E-paper module reset, it is often used to "
"awaken the module in while itâ€™s in the deep sleep mode, you will find "
"more details in the function ``EpdIf:: EPD_Sleep()``."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class EpdIF.rst:372
msgid ""
"After this command is transmitted, the chip would enter the deep-sleep "
"mode to save power. The deep sleep mode would return to standby by "
"hardware reset. You can use EPD:: Init() to awaken the E-paper module."
msgstr ""

#~ msgid "**EpdIf Class**"
#~ msgstr ""

#~ msgid "class EpdIf"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_Dis_Part**"
#~ msgstr ""

#~ msgid ""
#~ "void EPD_Dis_Part(unsigned int x_start, "
#~ "unsigned int y_start, const unsigned "
#~ "char\\* datas, unsigned int PART_COLUMN, "
#~ "unsigned int PART_LINE);"
#~ msgstr ""

#~ msgid "x_start: starting position of the x-axis"
#~ msgstr ""

#~ msgid "y_start: starting position of the y-axis"
#~ msgstr ""

#~ msgid "datas: data to be displayed on the e-paper module"
#~ msgstr ""

#~ msgid "PART_COLUMN: height of the display area"
#~ msgstr ""

#~ msgid "PART_LINE: width of the display area"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_SetFrame**"
#~ msgstr ""

#~ msgid ""
#~ "void EPD_SetFrame(const unsigned char\\* "
#~ "image_buffer, int x, int y, int "
#~ "image_width, int image_height);"
#~ msgstr ""

#~ msgid ""
#~ "image_buffer: the buffer which stores "
#~ "the data to be displayed on the"
#~ " e-paper module, usually used to "
#~ "display texts."
#~ msgstr ""

#~ msgid "x: starting position of the x-axis"
#~ msgstr ""

#~ msgid "y: starting position of the y-axis"
#~ msgstr ""

#~ msgid "image_width: width of the display area"
#~ msgstr ""

#~ msgid "image_height: height of the display area"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_SetRAMValue_BaseMap**"
#~ msgstr ""

#~ msgid "void EPD_SetRAMValue_BaseMap(const unsigned char\\* datas);"
#~ msgstr ""

#~ msgid ""
#~ "datas: contains the black and white "
#~ "information that forms the image stored"
#~ " in RAM"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_SetFrameMemory**"
#~ msgstr ""

#~ msgid "void EPD_SetFrameMemory(const unsigned char\\* image_buffer);"
#~ msgstr ""

#~ msgid ""
#~ "image_buffer: the buffer where stores "
#~ "the image data in hexadecimal numbers"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_UpdateDisplay**"
#~ msgstr ""

#~ msgid "void EPD_UpdateDisplay(void);"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_ClearScreen_White**"
#~ msgstr ""

#~ msgid "void EpdIf::EPD_ClearScreen_White(void);"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_ClearScreen_Black**"
#~ msgstr ""

#~ msgid "void EpdIf::EPD_ClearScreen_Black(void);"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_Busy**"
#~ msgstr ""

#~ msgid "void EpdIf::EPD_Busy(void);"
#~ msgstr ""

#~ msgid "**EpdIf:: EPD_Reset**"
#~ msgstr ""

#~ msgid ""
#~ "This command will let the E-paper "
#~ "module reset, it is often used to"
#~ " awaken the module in while itâ€™s "
#~ "in the deep sleep mode, you will"
#~ " find more details in the function"
#~ " EpdIf:: EPD_Sleep()."
#~ msgstr ""

#~ msgid "void EpdIf::EPD_Reset(void);"
#~ msgstr ""

#~ msgid "**EpdIf::EPD_Sleep**"
#~ msgstr ""

#~ msgid "void EpdIf::EPD_Sleep(void);"
#~ msgstr ""

