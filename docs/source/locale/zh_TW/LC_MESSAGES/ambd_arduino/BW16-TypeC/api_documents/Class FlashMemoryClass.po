# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Ameba IoT
# This file is distributed under the same license as the AmebaDocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AmebaDocs EPUB3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-02 06:46+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:3
msgid "Class FlashMemory"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:5
#: FlashMemoryClass.rst:49 FlashMemoryClass.rst:149 FlashMemoryClass.rst:191
#: FlashMemoryClass.rst:225 FlashMemoryClass.rst:260 FlashMemoryClass.rst:294
#: FlashMemoryClass.rst:331 FlashMemoryClass.rst:358
msgid "**Description**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:7
msgid "Defines a class of Flash memory API"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:9
#: FlashMemoryClass.rst:53 FlashMemoryClass.rst:153 FlashMemoryClass.rst:195
#: FlashMemoryClass.rst:229 FlashMemoryClass.rst:264 FlashMemoryClass.rst:299
#: FlashMemoryClass.rst:335 FlashMemoryClass.rst:362
msgid "**Syntax**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:15
msgid "**Members**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:18
msgid "**Public Constructors**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:20
msgid "Fl ashMemoryClass::FlashMemoryClass"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:20
msgid "Constructs a FlashMemoryClass object"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:23
msgid "Fla shMemoryClass::~FlashMemoryClass"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:23
msgid "Deconstructs a FlashMemoryClass object"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:26
msgid "**Public Methods**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:28
msgid "FlashMemoryClass::begin"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:28
msgid "Initialize/Re-initialize the base address and size"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:31
msgid "FlashMemoryClass::read"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:31
msgid "Read the content to buf"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:33
msgid "FlashMemoryClass::update"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:33
msgid "Write buf back to flash memory"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:35
msgid "FlashMemoryClass::readWord"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:35
msgid "Read 4 bytes from flash memory"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:37
msgid "FlashMemoryClass::writeWord"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:37
msgid "Write 4 bytes into flash memory"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:39
msgid "FlashMemoryClass::buf_size"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:39
msgid "The buf size"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:41
msgid "FlashMemoryClass::\\*buf"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:41
msgid "The buf to be operated"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:51
msgid "Constructs a FlashMemoryClass object."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:59
#: FlashMemoryClass.rst:159 FlashMemoryClass.rst:201 FlashMemoryClass.rst:235
#: FlashMemoryClass.rst:270 FlashMemoryClass.rst:305
msgid "**Parameters**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:61
msgid "``\\_base_address`` : The base address to operate."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:63
msgid ""
"``\\_buf_size`` : The buf size for mirror a copy to reduce flash memory "
"operation"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:65
#: FlashMemoryClass.rst:165 FlashMemoryClass.rst:205 FlashMemoryClass.rst:239
#: FlashMemoryClass.rst:274 FlashMemoryClass.rst:311
msgid "**Returns**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:67
#: FlashMemoryClass.rst:167 FlashMemoryClass.rst:207 FlashMemoryClass.rst:241
#: FlashMemoryClass.rst:313
msgid "The function returns nothing."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:69
#: FlashMemoryClass.rst:169 FlashMemoryClass.rst:209 FlashMemoryClass.rst:243
#: FlashMemoryClass.rst:278 FlashMemoryClass.rst:315 FlashMemoryClass.rst:341
#: FlashMemoryClass.rst:368
msgid "**Example Code**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:71
#: FlashMemoryClass.rst:171 FlashMemoryClass.rst:211 FlashMemoryClass.rst:245
msgid "Example: FleshMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:73
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes. Direct read from flash memory is allowed. To write data into flash"
" memory, each bit on flash memory can only change from ‘1’ to ‘0’ and it "
"cannot change from ‘0’ to ‘1’. To make sure the data are correctly "
"written we do erase the flash memory sector before write data on it."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:78
msgid "FlashMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:104
#: FlashMemoryClass.rst:178 FlashMemoryClass.rst:280 FlashMemoryClass.rst:317
msgid "Example: ReadWriteOneWord"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:106
msgid ""
"This example shows how to request flash memory larger than default "
"0x4000, and read/write one specific word (32-bit)."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:109
msgid "ReadWriteOneWord"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:140
#: FlashMemoryClass.rst:182 FlashMemoryClass.rst:216 FlashMemoryClass.rst:251
#: FlashMemoryClass.rst:285 FlashMemoryClass.rst:322 FlashMemoryClass.rst:349
#: FlashMemoryClass.rst:372
msgid "**Notes and Warnings**"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:142
#: FlashMemoryClass.rst:184 FlashMemoryClass.rst:218 FlashMemoryClass.rst:253
#: FlashMemoryClass.rst:287 FlashMemoryClass.rst:324 FlashMemoryClass.rst:351
#: FlashMemoryClass.rst:374
msgid "Include “FlashMemory.h” to use the class function."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:151
msgid ""
"Initialize/Re-initialize the base address and size. The base address "
"shell aligns with the size of 0x1000. And the size shell is multiple of "
"0x1000."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:161
msgid "``_base_address``: The base address"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:163
msgid "``_buf_size`` : The desired work size"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:173
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:180
#: FlashMemoryClass.rst:282 FlashMemoryClass.rst:319
msgid ""
"This example shows how to request flash memory larger than default "
"0x4000, and read/write one specific word (32-bit). Details of the example"
" codes can be found in the previous section of ``FlashMemoryClass:: "
"FlashMemoryClass``."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:193
msgid ""
"Read the content to buf. Read flash memory into the buf. The size would "
"be 0x1000."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:203
msgid "The function requires no input parameter."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:213
#: FlashMemoryClass.rst:247 FlashMemoryClass.rst:345
msgid ""
"This example demonstrates the basic use of flash memory. Since boot count"
" is stored in flash, each time upon device boot up, the boot count will "
"be read from the flash, add one, then write back to the flash. Ameba’s "
"flash memory can be edit in a unit of a sector which has the size of 4K "
"bytes. Details of the example codes can be found in the previous section "
"of ``FlashMemoryClass:: FlashMemoryClass``."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:227
msgid ""
"Write buf back to flash memory. Write flash memory with the content of "
"the buffer. The size is 0x1000."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:237
msgid ""
"``erase``: By default, it is true and erases flash memory before writing "
"to it"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:262
msgid ""
"Read 4 bytes from flash memory. Read 4 byte from specific offset based on"
" base address."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:272
#: FlashMemoryClass.rst:307
msgid "``offset`` : The offset according to the base address"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:276
msgid "The read data with a size of 4 bytes"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:296
msgid ""
"Write 4 bytes into flash memory. It will try to write 4 bytes first. If "
"the read data differ from the write data, then we buffer the sector of "
"flash memory, erase it, and write correct data back to it."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:309
msgid "``data`` : The data to be written"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:333
msgid "The buf size (It can be regarded as work size)."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:343
msgid "Example: FlashMemory_Basic"
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:360
msgid ""
"The buf to be operated. Modify buf won’t change the content of the buf. "
"It needs an update to write back to flash memory."
msgstr ""

#: ../../source/ambd_arduino/api_class/Class FlashMemoryClass.rst:370
msgid "NA"
msgstr ""

#~ msgid "Class EpdIF"
#~ msgstr ""

#~ msgid "**FlashMemoryClass Class**"
#~ msgstr ""

#~ msgid "class FlashMemoryClass"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::FlashMemoryClass**"
#~ msgstr ""

#~ msgid ""
#~ "FlashMemoryClass(unsigned int \\_base_address, "
#~ "unsigned int \\_buf_size);"
#~ msgstr ""

#~ msgid "\\_base_address: The base address to operate."
#~ msgstr ""

#~ msgid ""
#~ "\\_buf_size: The buf size for mirror "
#~ "a copy to reduce flash memory "
#~ "operation"
#~ msgstr ""

#~ msgid ""
#~ "Direct read from flash memory is "
#~ "allowed. To write data into flash "
#~ "memory, each bit on flash memory "
#~ "can only change from ‘1’ to ‘0’"
#~ " and it cannot change from ‘0’ "
#~ "to ‘1’. To make sure the data "
#~ "are correctly written we do erase "
#~ "the flash memory sector before write "
#~ "data on it."
#~ msgstr ""

#~ msgid "**#include <FlashMemory.h>**"
#~ msgstr ""

#~ msgid "**void** setup() {"
#~ msgstr ""

#~ msgid "FlashMemory.read();"
#~ msgstr ""

#~ msgid "**if** (FlashMemory.buf[0] == *0xFF*) {"
#~ msgstr ""

#~ msgid "FlashMemory.buf[0] = *0x00*;"
#~ msgstr ""

#~ msgid "FlashMemory.update();"
#~ msgstr ""

#~ msgid "Serial.println(\"write count to 0\");"
#~ msgstr ""

#~ msgid "} **else** {"
#~ msgstr ""

#~ msgid "FlashMemory.buf[0]++;"
#~ msgstr ""

#~ msgid "Serial.print(\"Boot count: \");"
#~ msgstr ""

#~ msgid "Serial.println(FlashMemory.buf[0]);"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "**void** loop() {"
#~ msgstr ""

#~ msgid "delay(1000);"
#~ msgstr ""

#~ msgid "unsigned **int** value;"
#~ msgstr ""

#~ msgid "/\\* request flash size 0x4000 from 0xFC000 \\*/"
#~ msgstr ""

#~ msgid "FlashMemory.begin(*0xFC000*, *0x4000*);"
#~ msgstr ""

#~ msgid "/\\* read one word (32-bit) from 0xFC000 plus offset 0x3F00 \\*/"
#~ msgstr ""

#~ msgid "value = FlashMemory.readWord(*0x3F00*);"
#~ msgstr ""

#~ msgid "printf(\"value is 0x%08X\\r\\n\", value);"
#~ msgstr ""

#~ msgid "**if** (value == *0xFFFFFFFF*) {"
#~ msgstr ""

#~ msgid "value = 0;"
#~ msgstr ""

#~ msgid "value++;"
#~ msgstr ""

#~ msgid "/\\* write one word (32-bit) to 0xFC000 plus offset 0x3F00 \\*/"
#~ msgstr ""

#~ msgid "FlashMemory.writeWord(*0x3F00*, value);"
#~ msgstr ""

#~ msgid "// put your main code here, to run repeatedly:"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::begin**"
#~ msgstr ""

#~ msgid "void begin(unsigned int \\_base_address, unsigned int \\_buf_size);"
#~ msgstr ""

#~ msgid "\\_base_address: The base address"
#~ msgstr ""

#~ msgid "\\_buf_size: The desired work size"
#~ msgstr ""

#~ msgid ""
#~ "Details of the example codes can "
#~ "be found in the previous section "
#~ "of “FlashMemoryClass:: FlashMemoryClass”."
#~ msgstr ""

#~ msgid "**FlashMemoryClass::read**"
#~ msgstr ""

#~ msgid "void read(void);"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::update**"
#~ msgstr ""

#~ msgid "void update(bool erase = true);"
#~ msgstr ""

#~ msgid ""
#~ "erase: By default, it is true and"
#~ " erases flash memory before writing "
#~ "to it"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::readWord**"
#~ msgstr ""

#~ msgid "unsigned int readWord(unsigned int offset);"
#~ msgstr ""

#~ msgid "offset: The offset according to the base address"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::writeWord**"
#~ msgstr ""

#~ msgid "void writeWord(unsigned int offset, unsigned int data);"
#~ msgstr ""

#~ msgid "data: The data to be written"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::buf_size**"
#~ msgstr ""

#~ msgid "unsigned int buf_size;"
#~ msgstr ""

#~ msgid "**FlashMemoryClass::*buf**"
#~ msgstr ""

#~ msgid "unsigned char \\*buf;"
#~ msgstr ""

